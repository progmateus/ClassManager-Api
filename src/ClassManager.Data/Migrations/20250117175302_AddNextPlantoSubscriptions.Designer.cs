// <auto-generated />
using System;
using ClassManager.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClassManager.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250117175302_AddNextPlantoSubscriptions")]
    partial class AddNextPlantoSubscriptions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClasManager.Domain.Contexts.Bookings.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassDayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassDayId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Accounts.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Avatar");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Name");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValue((byte)3)
                        .HasColumnName("Status");

                    b.Property<string>("StripeCustomerId")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("StripeCustomerId");

                    b.Property<byte>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("Type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(29)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Addresses.Entites.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("City");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Country");

                    b.Property<string>("Number")
                        .HasMaxLength(5)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Number");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("State");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Street");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.ClassDays.Entities.ClassDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("HourEnd")
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("HourEnd");

                    b.Property<string>("HourStart")
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("HourStart");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Name");

                    b.Property<string>("Observation")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Observation");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("Status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassDays", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Classes.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Name");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TimeTableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TimeTableId");

                    b.ToTable("Classes", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Classes.Entities.StudentsClasses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentsClasses", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Classes.Entities.TeachersClasses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("TeachersClasses", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Invoices.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL")
                        .HasColumnName("Amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("DATETIME")
                        .HasColumnName("ExpiresAt");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("Status");

                    b.Property<string>("StripeInvoiceId")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("StripeInvoiceId");

                    b.Property<string>("StripeInvoiceNumber")
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("StripeInvoiceNumber");

                    b.Property<string>("StripeInvoiceUrl")
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("StripeInvoiceUrl");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("TargetType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("TargetType");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TenantPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("Type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Invoices.Entities.Payout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL")
                        .HasColumnName("Amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Currency");

                    b.Property<byte>("Status")
                        .HasColumnType("TINYINT")
                        .HasColumnName("Status");

                    b.Property<string>("StripePayoutId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("VARCHAR");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Payouts", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Plans.Entities.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("ClassesLimit")
                        .HasColumnType("TINYINT")
                        .HasColumnName("ClassesLimit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL")
                        .HasColumnName("Price");

                    b.Property<string>("StripePriceId")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("StripePriceId");

                    b.Property<string>("StripeProductId")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("StripeProductId");

                    b.Property<int>("StudentsLimit")
                        .HasColumnType("INT")
                        .HasColumnName("StudentsLimit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Plans", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Roles.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Updatedat")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Roles.Entities.UsersRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersRoles", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Subscriptions.Entities.StripeCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("StripeCustomerId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("StripeCustomerId");

                    b.Property<byte>("TargetType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValue((byte)1);

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("StripeCustomers", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Subscriptions.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CanceledAt");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CurrentPeriodEnd")
                        .HasColumnType("datetime2")
                        .HasColumnName("CurrentPeriodEnd");

                    b.Property<DateTime>("CurrentPeriodStart")
                        .HasColumnType("datetime2")
                        .HasColumnName("CurrentPeriodStart");

                    b.Property<DateTime>("ExpiresDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LatestInvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NextPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NextTenantPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("StripeScheduleSubscriptionNextPlanId")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("StripeScheduleSubscriptionNextPlanId");

                    b.Property<string>("StripeSubscriptionId")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("StripeSubscriptionId");

                    b.Property<string>("StripeSubscriptionPriceItemId")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("StripeSubscriptionPriceItemId");

                    b.Property<byte>("TargetType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValue((byte)1);

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TenantPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LatestInvoiceId")
                        .IsUnique()
                        .HasFilter("[LatestInvoiceId] IS NOT NULL");

                    b.HasIndex("NextPlanId")
                        .IsUnique()
                        .HasFilter("[NextPlanId] IS NOT NULL");

                    b.HasIndex("NextTenantPlanId")
                        .IsUnique()
                        .HasFilter("[NextTenantPlanId] IS NOT NULL");

                    b.HasIndex("PlanId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Tenants.Entities.ExternalBankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("Currency");

                    b.Property<string>("Last4")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("Last4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR(150)")
                        .HasColumnName("Name");

                    b.Property<string>("RoutingNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("RoutingNumber");

                    b.Property<byte>("Status")
                        .HasColumnType("TINYINT")
                        .HasColumnName("Status");

                    b.Property<string>("StripeExternalBankAccountId")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR(150)")
                        .HasColumnName("StripeExternalBankAccountId");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("ExternalsBanksAccounts", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Tenants.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Tenants.Entities.Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("Type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR(300)")
                        .HasColumnName("Url");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Links", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Tenants.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Avatar");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Name");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT")
                        .HasDefaultValue((byte)2)
                        .HasColumnName("Status");

                    b.Property<string>("StripeAccountId")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("StripeAccountId");

                    b.Property<bool>("StripeChargesEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("StripeChargesEnabled");

                    b.Property<string>("StripeCustomerId")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("StripeCustomerId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Tenants", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Tenants.Entities.TenantPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL")
                        .HasColumnName("Price");

                    b.Property<string>("StripePriceId")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("StripePriceId");

                    b.Property<string>("StripeProductId")
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("StripeProductId");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("TimesOfweek")
                        .HasColumnType("TINYINT")
                        .HasColumnName("TimesOfweek");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantPlans", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.TimesTables.Entities.ScheduleDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HourEnd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("HourEnd");

                    b.Property<string>("HourStart")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("HourStart");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Name");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TimeTableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeekDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TimeTableId");

                    b.ToTable("SchedulesDays", (string)null);
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.TimesTables.Entities.TimeTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Name");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("TimesTables", (string)null);
                });

            modelBuilder.Entity("ClassUser", b =>
                {
                    b.Property<Guid>("ClassesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClassesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ClassUser");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("ClasManager.Domain.Contexts.Bookings.Entities.Booking", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.ClassDays.Entities.ClassDay", "ClassDay")
                        .WithMany("Bookings")
                        .HasForeignKey("ClassDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassManager.Domain.Contexts.Accounts.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassDay");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Accounts.Entities.User", b =>
                {
                    b.OwnsOne("ClassManager.Domain.Contexts.Shared.ValueObjects.Document", "Document", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("Document");

                            b1.Property<byte>("Type")
                                .HasColumnType("TINYINT")
                                .HasColumnName("DocumentType");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("ClassManager.Domain.Contexts.Shared.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.OwnsOne("ClassManager.Domain.Contexts.Shared.ValueObjects.Verification", "Verification", b2 =>
                                {
                                    b2.Property<Guid>("EmailUserId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Code")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("EmailVerificationCode");

                                    b2.Property<DateTime?>("ExpiresAt")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("EmailVerificationExpiresAt");

                                    b2.Property<DateTime?>("VerifiedAt")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("EmailVerificationVerifiedAt");

                                    b2.HasKey("EmailUserId");

                                    b2.ToTable("Users");

                                    b2.WithOwner()
                                        .HasForeignKey("EmailUserId");
                                });

                            b1.Navigation("Verification")
                                .IsRequired();
                        });

                    b.OwnsOne("ClassManager.Domain.Contexts.Shared.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .HasMaxLength(30)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("Phone");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("ClassManager.Domain.Contexts.Shared.ValueObjects.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Hash")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PasswordHash");

                            b1.Property<string>("ResetCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PasswordResetCode");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Document")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Addresses.Entites.Address", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Tenants.Entities.Tenant", "Tenant")
                        .WithMany("Addresses")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClassManager.Domain.Contexts.Accounts.Entities.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("ClassManager.Domain.Contexts.Addresses.Entites.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.ClassDays.Entities.ClassDay", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Classes.Entities.Class", "Class")
                        .WithMany("ClassDays")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Classes.Entities.Class", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Addresses.Entites.Address", "Address")
                        .WithMany("Classes")
                        .HasForeignKey("AddressId");

                    b.HasOne("ClassManager.Domain.Contexts.Tenants.Entities.Tenant", "Tenant")
                        .WithMany("Classes")
                        .HasForeignKey("TenantId")
                        .IsRequired();

                    b.HasOne("ClassManager.Domain.Contexts.TimesTables.Entities.TimeTable", "TimeTable")
                        .WithMany("Classes")
                        .HasForeignKey("TimeTableId");

                    b.Navigation("Address");

                    b.Navigation("Tenant");

                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Classes.Entities.StudentsClasses", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Classes.Entities.Class", "Class")
                        .WithMany("StudentsClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassManager.Domain.Contexts.Accounts.Entities.User", "User")
                        .WithMany("StudentsClasses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Classes.Entities.TeachersClasses", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Classes.Entities.Class", "Class")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassManager.Domain.Contexts.Accounts.Entities.User", "User")
                        .WithMany("TeachersClasses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Invoices.Entities.Invoice", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Plans.Entities.Plan", "Plan")
                        .WithMany("Invoices")
                        .HasForeignKey("PlanId");

                    b.HasOne("ClassManager.Domain.Contexts.Subscriptions.Entities.Subscription", "Subscription")
                        .WithMany("Invoices")
                        .HasForeignKey("SubscriptionId");

                    b.HasOne("ClassManager.Domain.Contexts.Tenants.Entities.Tenant", "Tenant")
                        .WithMany("Invoices")
                        .HasForeignKey("TenantId")
                        .IsRequired();

                    b.HasOne("ClassManager.Domain.Contexts.Tenants.Entities.TenantPlan", "TenantPlan")
                        .WithMany("Invoices")
                        .HasForeignKey("TenantPlanId");

                    b.HasOne("ClassManager.Domain.Contexts.Accounts.Entities.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("Subscription");

                    b.Navigation("Tenant");

                    b.Navigation("TenantPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Invoices.Entities.Payout", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Tenants.Entities.Tenant", "Tenant")
                        .WithMany("Payouts")
                        .HasForeignKey("TenantId")
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Roles.Entities.Role", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Tenants.Entities.Tenant", null)
                        .WithMany("Roles")
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Roles.Entities.UsersRoles", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Roles.Entities.Role", "Role")
                        .WithMany("UsersRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.HasOne("ClassManager.Domain.Contexts.Tenants.Entities.Tenant", "Tenant")
                        .WithMany("UsersRoles")
                        .HasForeignKey("TenantId")
                        .IsRequired();

                    b.HasOne("ClassManager.Domain.Contexts.Accounts.Entities.User", "User")
                        .WithMany("UsersRoles")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Subscriptions.Entities.StripeCustomer", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Tenants.Entities.Tenant", "Tenant")
                        .WithMany("StripeCustomers")
                        .HasForeignKey("TenantId")
                        .IsRequired();

                    b.HasOne("ClassManager.Domain.Contexts.Accounts.Entities.User", "User")
                        .WithMany("StripeCustomers")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Subscriptions.Entities.Subscription", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Invoices.Entities.Invoice", "LatestInvoice")
                        .WithOne()
                        .HasForeignKey("ClassManager.Domain.Contexts.Subscriptions.Entities.Subscription", "LatestInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClassManager.Domain.Contexts.Plans.Entities.Plan", "NextPlan")
                        .WithOne()
                        .HasForeignKey("ClassManager.Domain.Contexts.Subscriptions.Entities.Subscription", "NextPlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClassManager.Domain.Contexts.Tenants.Entities.TenantPlan", "NextTenantPlan")
                        .WithOne()
                        .HasForeignKey("ClassManager.Domain.Contexts.Subscriptions.Entities.Subscription", "NextTenantPlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClassManager.Domain.Contexts.Plans.Entities.Plan", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId");

                    b.HasOne("ClassManager.Domain.Contexts.Tenants.Entities.Tenant", "Tenant")
                        .WithMany("Subscriptions")
                        .HasForeignKey("TenantId")
                        .IsRequired();

                    b.HasOne("ClassManager.Domain.Contexts.Tenants.Entities.TenantPlan", "TenantPlan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("TenantPlanId");

                    b.HasOne("ClassManager.Domain.Contexts.Accounts.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId");

                    b.Navigation("LatestInvoice");

                    b.Navigation("NextPlan");

                    b.Navigation("NextTenantPlan");

                    b.Navigation("Plan");

                    b.Navigation("Tenant");

                    b.Navigation("TenantPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Tenants.Entities.ExternalBankAccount", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Tenants.Entities.Tenant", "Tenant")
                        .WithMany("ExternalsBanksAccounts")
                        .HasForeignKey("TenantId")
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Tenants.Entities.Image", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Tenants.Entities.Tenant", "Tenant")
                        .WithMany("Images")
                        .HasForeignKey("TenantId")
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Tenants.Entities.Link", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Tenants.Entities.Tenant", "Tenant")
                        .WithMany("Links")
                        .HasForeignKey("TenantId")
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Tenants.Entities.Tenant", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Plans.Entities.Plan", "Plan")
                        .WithMany("Tenants")
                        .HasForeignKey("PlanId")
                        .IsRequired();

                    b.HasOne("ClassManager.Domain.Contexts.Accounts.Entities.User", "User")
                        .WithMany("Tenants")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.OwnsOne("ClassManager.Domain.Contexts.Shared.ValueObjects.Document", "Document", b1 =>
                        {
                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("Document");

                            b1.Property<byte>("Type")
                                .HasColumnType("TINYINT")
                                .HasColumnName("DocumentType");

                            b1.HasKey("TenantId");

                            b1.ToTable("Tenants");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");
                        });

                    b.OwnsOne("ClassManager.Domain.Contexts.Shared.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("Email");

                            b1.HasKey("TenantId");

                            b1.ToTable("Tenants");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");
                        });

                    b.OwnsOne("ClassManager.Domain.Contexts.Shared.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .HasMaxLength(30)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("Phone");

                            b1.HasKey("TenantId");

                            b1.ToTable("Tenants");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");
                        });

                    b.Navigation("Document")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Phone");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Tenants.Entities.TenantPlan", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Tenants.Entities.Tenant", "Tenant")
                        .WithMany("TenantPlans")
                        .HasForeignKey("TenantId")
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.TimesTables.Entities.ScheduleDay", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.TimesTables.Entities.TimeTable", "TimeTable")
                        .WithMany("SchedulesDays")
                        .HasForeignKey("TimeTableId")
                        .IsRequired();

                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.TimesTables.Entities.TimeTable", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Tenants.Entities.Tenant", "Tenant")
                        .WithMany("TimesTables")
                        .HasForeignKey("TenantId")
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ClassUser", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Classes.Entities.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassesId")
                        .IsRequired();

                    b.HasOne("ClassManager.Domain.Contexts.Accounts.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("ClassManager.Domain.Contexts.Roles.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .IsRequired();

                    b.HasOne("ClassManager.Domain.Contexts.Accounts.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .IsRequired();
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Accounts.Entities.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Bookings");

                    b.Navigation("Invoices");

                    b.Navigation("StripeCustomers");

                    b.Navigation("StudentsClasses");

                    b.Navigation("Subscriptions");

                    b.Navigation("TeachersClasses");

                    b.Navigation("Tenants");

                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Addresses.Entites.Address", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.ClassDays.Entities.ClassDay", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Classes.Entities.Class", b =>
                {
                    b.Navigation("ClassDays");

                    b.Navigation("StudentsClasses");

                    b.Navigation("TeachersClasses");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Plans.Entities.Plan", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Subscriptions");

                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Roles.Entities.Role", b =>
                {
                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Subscriptions.Entities.Subscription", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Tenants.Entities.Tenant", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Classes");

                    b.Navigation("ExternalsBanksAccounts");

                    b.Navigation("Images");

                    b.Navigation("Invoices");

                    b.Navigation("Links");

                    b.Navigation("Payouts");

                    b.Navigation("Roles");

                    b.Navigation("StripeCustomers");

                    b.Navigation("Subscriptions");

                    b.Navigation("TenantPlans");

                    b.Navigation("TimesTables");

                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.Tenants.Entities.TenantPlan", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("ClassManager.Domain.Contexts.TimesTables.Entities.TimeTable", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("SchedulesDays");
                });
#pragma warning restore 612, 618
        }
    }
}
